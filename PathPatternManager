using System.Linq;
using System.Collections.Generic;
using UnityEngine;
using CodeStage.AntiCheat.ObscuredTypes;
public class PathPatternManager : MonoBehaviour
{
    public List<NodePattern> patternDict;
    #region  pattern
    List<ObscuredInt> list1 = new List<ObscuredInt> { 0 };
    List<ObscuredInt> list2 = new List<ObscuredInt> { 0, 1 };
    List<ObscuredInt> list3 = new List<ObscuredInt> { 0, 1, 2 };
    List<ObscuredInt> list4 = new List<ObscuredInt> { 0, 1, 2, 3 };
    List<ObscuredInt> list6 = new List<ObscuredInt> { 1 };
    List<ObscuredInt> list7 = new List<ObscuredInt> { 2 };
    List<ObscuredInt> list8 = new List<ObscuredInt> { 1, 2 };
    List<ObscuredInt> list9 = new List<ObscuredInt> { 3 };
    List<ObscuredInt> list10 = new List<ObscuredInt> { 2, 3 };
    List<ObscuredInt> list11 = new List<ObscuredInt> { 2, 3, 4 };
    List<ObscuredInt> list12 = new List<ObscuredInt> { 0, 2 };
    List<ObscuredInt> list13 = new List<ObscuredInt> { 0, 3 };
    List<ObscuredInt> list14 = new List<ObscuredInt> { 1, 3 };

    #endregion  pattern

    public void Init()
    {
        patternDict = new List<NodePattern>();
        #region resister
        this.ResisterPattern(1, 1, list1);
        this.ResisterPattern(1, 2, list2);
        this.ResisterPattern(1, 3, list3);
        this.ResisterPattern(1, 4, list4);
        this.ResisterPattern(2, 1, list1);
        this.AddPattern(list1);
        // this.ResisterPattern(2, 2, list1);
        // this.AddPattern(list6);
        this.ResisterPattern(2, 2, list6);
        this.AddPattern(list1);
        this.ResisterPattern(2, 3, list8);
        this.AddPattern(list1);
        this.ResisterPattern(2, 3, list2);
        this.AddPattern(list7);
        this.ResisterPattern(2, 4, list3);
        this.AddPattern(list9);
        this.ResisterPattern(2, 4, list2);
        this.AddPattern(list10);
        this.ResisterPattern(3, 1, list1);
        this.AddPattern(list1);
        this.AddPattern(list1);
        this.ResisterPattern(3, 2, list6);
        this.AddPattern(list1);
        this.AddPattern(list1);
        this.ResisterPattern(3, 2, list6);
        this.AddPattern(list1);
        this.AddPattern(list6);
        this.ResisterPattern(3, 3, list6);
        this.AddPattern(list7);
        this.AddPattern(list1);
        this.ResisterPattern(3, 3, list7);
        this.AddPattern(list1);
        this.AddPattern(list2);
        this.ResisterPattern(3, 3, list7);
        this.AddPattern(list1);
        this.AddPattern(list6);
        this.ResisterPattern(3, 3, list1);
        this.AddPattern(list7);
        this.AddPattern(list6);
        this.ResisterPattern(3, 4, list7);
        this.AddPattern(list13);
        this.AddPattern(list6);
        this.ResisterPattern(3, 4, list1);
        this.AddPattern(list9);
        this.AddPattern(list8);
        this.ResisterPattern(3, 4, list6);
        this.AddPattern(list13);
        this.AddPattern(list7);
        this.ResisterPattern(4, 1, list1);
        this.AddPattern(list1);
        this.AddPattern(list1);
        this.AddPattern(list1);
        this.ResisterPattern(4, 2, list1);
        this.AddPattern(list1);
        this.AddPattern(list6);
        this.AddPattern(list6);
        this.ResisterPattern(4, 2, list1);
        this.AddPattern(list1);
        this.AddPattern(list2);
        this.AddPattern(list6);
        this.ResisterPattern(4, 3, list6);
        this.AddPattern(list1);
        this.AddPattern(list7);
        this.AddPattern(list6);
        this.ResisterPattern(4, 3, list6);
        this.AddPattern(list1);
        this.AddPattern(list7);
        this.AddPattern(list6);
        this.ResisterPattern(4, 4, list6);
        this.AddPattern(list1);
        this.AddPattern(list9);
        this.AddPattern(list7);
        this.ResisterPattern(4, 4, list6);
        this.AddPattern(list13);
        this.AddPattern(list6);
        this.AddPattern(list7);
        this.ResisterPattern(4, 4, list2);
        this.AddPattern(list7);
        this.AddPattern(list14);
        this.AddPattern(list7);
        #endregion
    }

    void ResisterPattern(ObscuredInt pre, ObscuredInt next, List<ObscuredInt> list)
    {
        NodePattern nodePattern = new NodePattern(pre, next, list);
        patternDict.Add(nodePattern);
    }

    void AddPattern(List<ObscuredInt> list)
    {
        patternDict.Last().pattern.Add(list);
    }

    public NodePattern GetRandomPattern(ObscuredInt pre, ObscuredInt next)
    {
        List<NodePattern> patterns = new List<NodePattern>();

        for (int i = 0; i < patternDict.Count; i++)
        {
            if (patternDict[i].preCount == pre && patternDict[i].nextCount == next)
            {
                patterns.Add(patternDict[i]);
            }
        }

        ObscuredInt index = Random.Range(0, patterns.Count);

        // Debug.Log("# randomPattern " + pre + " / " + next + "/ pick " + index);

        return patterns[index];
    }
}
